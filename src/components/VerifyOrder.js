import React, { useState, useEffect } from "react";
import { Row, Col, Button, Table, Form, Container, Alert } from "react-bootstrap";
import { Link, useNavigate } from "react-router-dom";
import Home from "@mui/icons-material/Home";
import DeleteIcon from "@mui/icons-material/Delete";
import { toast } from "react-toastify";

function VerifyOrder() {
  const navigate = useNavigate();
  const [hover, setHover] = useState(false);
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [address, setAddress] = useState("");
  const [phone, setPhone] = useState("");
  const [orderDate, setOrderDate] = useState("");
  const [requestDate, setRequestDate] = useState("");
  const [email, setEmail] = useState("");
  const [user, setUser] = useState(() => {
    const existUser = JSON.parse(localStorage.getItem("user"));
    return existUser || null;
  });

  const [cart, setCart] = useState(() => {
    const storedCart = JSON.parse(localStorage.getItem("cart"));
    return storedCart ? storedCart.sort((a, b) => a.id - b.id) : [];
  });

  useEffect(() => {
    localStorage.setItem("cart", JSON.stringify(cart));
    localStorage.setItem("user", JSON.stringify(user));
  }, [cart, user]);

  const calculateTotal = () => {
    let total = 0;
    cart.forEach((item) => {
      total += item.price * item.quantity;
    });
    const vat = (total * 8) / 100;
    const priceTotal = total + vat;
    return priceTotal;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // l·∫•y ng√†y hi·ªán t·∫°i
    // "2024-04-24T15:30:00" => ["2024-04-24", "15:30:00"];
    const currentDate = new Date();
    const formattedCurrentDate = currentDate.toISOString().split("T")[0];

    let errors = [];
    if (firstName.trim() === "") {
      errors.push("Vui l√≤ng ƒëi·ªÅn First Name");
    }
    if (lastName.trim() === "") {
      errors.push("Vui l√≤ng ƒëi·ªÅn Last Name");
    }
    if (address.trim() === "") {
      errors.push("Vui l√≤ng ƒëi·ªÅn ƒë·ªãa ch·ªâ c·ªßa b·∫°n");
    }
    if (phone.trim() === "") {
      errors.push("Vui l√≤ng ƒëi·ªÅn s·ªë ƒëi·ªán tho·∫°i");
    }
    if (requestDate === "") {
      errors.push("Vui l√≤ng ƒëi·ªÅn Ng√†y Y√™u C·∫ßu Nh·∫≠n H√†ng");
    }
    if (requestDate < formattedCurrentDate) {
      errors.push("Ng√†y y√™u c·∫ßu nh·∫≠n h√†ng ph·∫£i l√† c√°c ng√†y trong t∆∞∆°ng lai");
    }
    if (email.trim() === "") {
      errors.push("H√£y ƒëi·ªÅn Email c·ªßa b·∫°n");
    }
    if (!phone.match(/^\d{10}$/)) {
      errors.push("S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng");
    }

    if (errors.length > 0) {
      alert(errors.join("\n"));
      return false;
    }
    const confirmInfo = window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn r·∫±ng c√°c th√¥ng tin c·ªßa m√¨nh l√† ch√≠nh x√°c, ƒë·∫∑c bi·ªát l√† Email ??`);
    if (!confirmInfo) {
      return false; // Kh√¥ng th·ª±c hi·ªán checkout n·∫øu ng∆∞·ªùi d√πng ch·ªçn Cancel
    }

    const customerNoLoginOrder = {
      orderDate: formattedCurrentDate,
      requestDate: requestDate,
      status: "Ordered",
      customer: {
        firstName,
        lastName,
        address,
        phone,
        email,
      },
      product: cart.map((item) => ({
        pid: item.id,
        pName: item.name,
        price: item.price,
        quantity: item.quantity,
      })),
      vat: "8%",
      total: calculateTotal().toLocaleString("vi-VN", {
        style: "currency",
        currency: "VND",
      }),
    };
    fetch("http://localhost:9999/orderDetailsNoLogin", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(customerNoLoginOrder),
    })
      .then((response) => {
        if (response.ok) {
          localStorage.removeItem("cart");
          localStorage.removeItem("cartCount");
          toast.success(`ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!`, {
            autoClose: 2000,
            closeButton: false,
            hideProgressBar: true,
            position: "top-center",
          });
          navigate("/");
        } else {
          throw new Error("G·ª≠i ƒë∆°n ƒë·∫∑t h√†ng kh√¥ng th√†nh c√¥ng");
        }
      })
      .catch((error) => {
        console.error("C√≥ l·ªói khi g·ª≠i ƒë∆°n:", error);
        alert("C√≥ l·ªói khi ƒë·∫∑t h√†ng. H√£y th·ª≠ l·∫°i sau");
      });
  };
  //H√†m x·ª≠ l√Ω xo√° h·∫øt gi·ªè h√†ng
  const handleClearAll = () => {
    localStorage.removeItem("cart");
    localStorage.removeItem("cartCount");
    window.location.reload();
    toast.success(`B·∫°n ƒë√£ xo√° to√†n b·ªô s·∫£n ph·∫©m trong gi·ªè h√†ng`, {
      autoClose: 2000,
      closeButton: false,
      hideProgressBar: true,
      position: "top-center",
    });
  };
  //H√†m x·ª≠ l√Ω xo√° ri√™ng 1 s·∫£n ph·∫©m n√†o ƒë√≥
  const handleRemove = (id) => {
    const updatedCart = cart.filter((item) => item.id !== id);
    setCart(updatedCart);
    const remainingItemsCount = updatedCart.length;
    localStorage.setItem("cartCount", remainingItemsCount.toString());
  };
  //H√†m thay ƒë·ªïi s·ªë l∆∞·ª£ng c·ªßa 1 s·∫£n ph·∫©m n√†o ƒë√≥
  const handleQuantityChange = (id, change) => {
    const itemToUpdate = cart.find((item) => item.id === id);
    if (!itemToUpdate) {
      return;
    }
    const updatedQuantity = itemToUpdate.quantity + change;
    if (updatedQuantity === 0) {
      const confirmInfo = window.confirm(`B·∫°n mu·ªën lo·∫°i b·ªè h·∫≥n s·∫£n ph·∫©m "${itemToUpdate.name}" kh·ªèi Gi·ªè H√†ng ?`);
      if (!confirmInfo) {
        return;
      }
    }
    if (itemToUpdate.quantity === 1 && updatedQuantity === 2) {
      //kh√¥ng x·ª≠ l√Ω n·∫øu tƒÉng t·ª´ 1 l√™n
    }
    const updatedCart = cart
      .map((item) => {
        if (item.id === id) {
          return { ...item, quantity: updatedQuantity };
        }
        return item;
      })
      .filter((item) => item.quantity > 0);
    setCart(updatedCart);
    //t√≠nh l·∫°i s·ªë l∆∞·ª£ng m·∫∑t h√†ng trong gi·ªè khi c√≥ s·∫£n ph·∫©m n√†o ƒë√≥ b·ªã gi·∫£m v·ªÅ 0
    const remainingItemsCount = updatedCart.length;
    localStorage.setItem("cartCount", remainingItemsCount.toString());
  };

  return (
    <Container fluid>
      <Row style={{ textAlign: "center", fontWeight: "bold", marginTop: "19px", marginBottom: "20px" }}>
        <h1 style={{ border: "2px solid black", borderRadius: "10px", padding: "10px", backgroundColor: "#DCDCE6" }}>X√ÅC MINH CHI TI·∫æT ƒê∆†N H√ÄNG</h1>
      </Row>
      {cart.length === 0 ? (
        <Alert variant="danger" style={{ margin: "auto", height: "auto", fontSize: "1.5rem" }}>
          Gi·ªè H√†ng c·ªßa b·∫°n ƒëang tr·ªëng! <Link to={"/productuser"}>Quay l·∫°i Shop ngay üõíüíªüì±</Link>
        </Alert>
      ) : (
        <>
          <Row className="mt-3 mb-3">
            <Row>
              <Col xs={6} style={{ textAlign: "start", marginBottom: "1rem", marginTop: "5px" }}>
                <Button variant="dark" style={{ textDecoration: "none", color: "white" }} as={Link} to="/productuser">
                  &larr;Tr·ªü v·ªÅ <Home />
                </Button>
              </Col>
              <Col xs={6} style={{ textAlign: "end", marginBottom: "1rem" }}>
                <Button
                  variant="danger"
                  onMouseEnter={(e) => (e.target.style.color = "black")}
                  onMouseLeave={(e) => (e.target.style.color = "white")}
                  onClick={() => handleClearAll()}
                >
                  X√≥a Gi·ªè H√†ng <DeleteIcon />{" "}
                </Button>
              </Col>
            </Row>
            <p style={{ color: "red", textAlign: "center", fontWeight: "bold" }}>
              (V√¨ b·∫°n kh√¥ng c√≥ t√†i kho·∫£n n√™n ch√∫ng t√¥i c·∫ßn th·ª±c hi·ªán c√°c b∆∞·ªõc x√°c minh ƒë·ªÉ ch·∫Øc ch·∫Øn r·∫±ng b·∫°n c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c s·∫£n ph·∫©m khi mua t·∫°i C·ª≠a H√†ng c·ªßa ch√∫ng t√¥i)
            </p>
            <Table hover striped bordered>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>·∫¢nh</th>
                  <th>T√™n s·∫£n ph·∫©m</th>
                  <th>Gi√° Th√†nh</th>
                  <th>S·ªë L∆∞·ª£ng</th>
                  <th>T·ªïng</th>
                  <th>Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {cart.map((c) => (
                  <tr key={c.id}>
                    <td>{c.id}</td>
                    <td>
                      <img src={`${c.image}`} style={{ width: "100px" }} alt={c.name} />
                    </td>
                    <td>{c.name}</td>
                    <td>{c.price.toLocaleString("vi-VN", { style: "currency", currency: "VND" })}</td>
                    <td>
                      <Button variant="secondary" size="sm" onClick={() => handleQuantityChange(c.id, -1)}>
                        -
                      </Button>
                      <input
                        type="number"
                        min="1"
                        max={10}
                        value={c.quantity}
                        onChange={(e) => {
                          const newQuantity = parseInt(e.target.value);
                          if (newQuantity > 10) {
                            toast.success(`B·∫°n ch·ªâ c√≥ th·ªÉ mua t·ªëi ƒëa 10 s·∫£n ph·∫©m trong ng√†y!`, {
                              autoClose: 2000,
                              closeButton: false,
                              hideProgressBar: true,
                              position: "top-center",
                            });
                            return;
                          }
                          handleQuantityChange(c.id, newQuantity - c.quantity);
                        }}
                        style={{ width: "50px", textAlign: "center", margin: "0 5px" }}
                      />
                      <Button
                        variant="secondary"
                        size="sm"
                        onClick={() => {
                          if (c.quantity >= 10) {
                            toast.success(`B·∫°n ch·ªâ c√≥ th·ªÉ mua t·ªëi ƒëa 10 s·∫£n ph·∫©m trong ng√†y!`, {
                              autoClose: 2000,
                              closeButton: false,
                              hideProgressBar: true,
                              position: "top-center",
                            });
                            return;
                          }
                          handleQuantityChange(c.id, 1);
                        }}
                      >
                        +
                      </Button>
                    </td>
                    <td>{(c.price * c.quantity).toLocaleString("vi-VN", { style: "currency", currency: "VND" })}</td>
                    <td>
                      <Button variant="danger" onClick={() => handleRemove(c.id)}>
                        X
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
            <Row style={{ textAlign: "end" }}>
              <h3>
                VAT:
                <span style={{ color: "red" }}> 8%</span>
              </h3>
              <h3>
                Th√†nh Ti·ªÅn:
                <span style={{ color: "red" }}> {calculateTotal().toLocaleString("vi-VN", { style: "currency", currency: "VND" })}</span>
              </h3>
            </Row>
          </Row>

          {/* Form ƒëi·ªÅn th√¥ng tin cho ng∆∞·ªùi mua ko ƒëƒÉng nh·∫≠p */}
          <Row style={{ marginTop: "20px" }}>
            <h3>Th√¥ng tin v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng</h3>
            <Form onSubmit={(e) => handleSubmit(e)}>
              <Row className="mt-2">
                <Form.Group as={Col} sm={6}>
                  <Form.Label>H·ªç(*)</Form.Label>
                  <Col sm={9}>
                    <Form.Control type="text" name="firstName" defaultValue={user ? user.firstName : ""} onChange={(e) => setFirstName(e.target.value)} />
                  </Col>
                </Form.Group>
                <Form.Group as={Col} sm={6}>
                  <Form.Label>T√™n(*)</Form.Label>
                  <Col sm={9}>
                    <Form.Control name="lastName" defaultValue={user ? user.lastName : ""} type="text" onChange={(e) => setLastName(e.target.value)} />
                  </Col>
                </Form.Group>
              </Row>
              <Row className="mt-2">
                <Form.Group as={Col} sm={6}>
                  <Form.Label>ƒê·ªãa ch·ªâ c·ªßa b·∫°n(*)</Form.Label>
                  <Col sm={9}>
                    <Form.Control name="address" as="textarea" rows={3} onChange={(e) => setAddress(e.target.value)} />
                  </Col>
                </Form.Group>
                <Form.Group as={Col} sm={6}>
                  <Form.Label>S·ªë ƒëi·ªán tho·∫°i(*)</Form.Label>
                  <Col sm={9}>
                    <Form.Control name="phone" type="text" onChange={(e) => setPhone(e.target.value)} />
                  </Col>
                </Form.Group>
              </Row>
              <Row className="mt-2">
                <Form.Group as={Col} sm={6}>
                  <Form.Label>Email(*)</Form.Label>
                  <Col sm={9}>
                    <Form.Control
                      name="email"
                      type="email"
                      defaultValue={user ? user.email : ""}
                      onChange={(e) => setEmail(e.target.value)}
                      placeholder="Ch√∫ng t√¥i kh√¥ng ch·ªãu tr√°ch nhi·ªám n·∫øu email kh√¥ng t·ªìn t·∫°i"
                    />
                  </Col>
                </Form.Group>
                <Form.Group as={Col} sm={6}>
                  <Form.Label>Ng√†y y√™u c·∫ßu nh·∫≠n h√†ng(*)</Form.Label>
                  <Col sm={9}>
                    <Form.Control name="requestDate" type="date" min={orderDate} defaultValue={requestDate} onChange={(e) => setRequestDate(e.target.value)} />
                  </Col>
                </Form.Group>
              </Row>
              <Row className="mt-3">
                <Col>
                  <div>
                    <span>
                      <Button
                        type="submit"
                        style={{
                          borderColor: "orange",
                          backgroundColor: hover ? "#FFD700" : "orange", // Hover: V√†ng s√°ng
                          color: hover ? "black" : "white", // ƒê·ªïi m√†u ch·ªØ khi hover ƒë·ªÉ r√µ r√†ng h∆°n
                          marginBottom: "5px",
                          marginLeft: "-4px",
                          transition: "background-color 0.3s ease, color 0.3s ease", // Hi·ªáu ·ª©ng m∆∞·ª£t
                        }}
                        onMouseEnter={() => setHover(true)}
                        onMouseLeave={() => setHover(false)}
                      >
                        Thanh To√°n Ngay
                      </Button>
                    </span>{" "}
                    <span style={{ color: "red", paddingBottom: "20px" }}>
                      Nh·∫•n "Thanh To√°n" ƒë·ªìng nghƒ©a v·ªõi vi·ªác b·∫°n ƒë√£ ƒë·ªìng √Ω v·ªõi c√°c th√¥ng tin c·ªßa m√¨nh l√† ch√≠nh x√°c. C√≥ th·ªÉ b·∫°n s·∫Ω mu·ªën ki·ªÉm tra l·∫°i Email.
                      <Link to={"/auth/login"} style={{ textDecoration: "none" }}>
                        {" "}
                        "ƒêƒÉng nh·∫≠p"{" "}
                      </Link>
                      ngay ƒë·ªÉ c√≥ th·ªÉ xem L·ªãch S·ª≠ ƒê·∫∑t H√†ng v√† s·ª≠ d·ª•ng c√°c Voucher t·ª´ Shop
                    </span>
                  </div>
                </Col>
              </Row>
            </Form>
          </Row>
        </>
      )}
    </Container>
  );
}

export default VerifyOrder;
